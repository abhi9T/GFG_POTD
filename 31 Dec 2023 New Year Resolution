
from typing import List


class Solution:
    def isPossible(self, N : int, coins : List[int]) -> bool:
        # code here
        total_coins = sum(coins)
        dp = [[False] * (total_coins + 1) for _ in range(N + 1)]

        # Base case: If there are 0 days, Geek can achieve 0 coins.
        for i in range(N + 1):
            dp[i][0] = True

        for i in range(1, N + 1):
            for j in range(1, total_coins + 1):
                # If the current day's coins are greater than the target, don't include it.
                if coins[i - 1] > j:
                    dp[i][j] = dp[i - 1][j]
                else:
                    # Either include or exclude the current day's coins.
                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - coins[i - 1]]

        # Check if there exists a subset of coins such that its sum is divisible by 20, 24, or equal to 2024.
        for i in range(1, total_coins + 1):
            if dp[N][i] and (i % 20 == 0 or i % 24 == 0 or i == 2024):
                return True

        return False



#{ 
 # Driver Code Starts

class IntArray:
    def __init__(self) -> None:
        pass
    def Input(self,n):
        arr=[int(i) for i in input().strip().split()]#array input
        return arr
    def Print(self,arr):
        for i in arr:
            print(i,end=" ")
        print()


if __name__=="__main__":
    t = int(input())
    for _ in range(t):
        
        N = int(input())
        
        
        coins=IntArray().Input(N)
        
        obj = Solution()
        res = obj.isPossible(N, coins)
        
        result_val = 1 if res else 0
        print(result_val)

# } Driver Code Ends
