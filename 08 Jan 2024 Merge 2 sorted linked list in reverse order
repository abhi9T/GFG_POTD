#User function Template for python3
class Solution:
    def mergeResult(self, node1, node2):
        starter = Node(0)
        ans = starter

        while node1 is not None and node2 is not None:
            if node1.data < node2.data:
                ans.next = node1
                node1 = node1.next
                ans = ans.next
            else:
                ans.next = node2
                node2 = node2.next
                ans = ans.next

        if node1 is not None:
            ans.next = node1
        if node2 is not None:
            ans.next = node2

        curr = starter.next
        prev = None

        while curr is not None:
            forw = curr.next
            curr.next = prev
            prev = curr
            curr = forw

        return prev


#{ 
 # Driver Code Starts
#Initial Template for Python 3

#contributed by RavinderSinghPB
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

class Llist:
    def __init__(self):
        self.head=None
    
    def insert(self,data,tail):
        node=Node(data)
        
        if not self.head:
            self.head=node
            return node
        
        tail.next=node
        return node
        

def printList(head):
    while head:
        print(head.data,end=' ')
        head=head.next
        
if __name__ == '__main__':
    t=int(input())
    
    for tcs in range(t):
        
        n1,n2=[int(x) for x in input().split()]
        
        arr1=[int(x) for x in input().split()]
        ll1=Llist()
        tail=None
        for nodeData in arr1:
            tail=ll1.insert(nodeData,tail)
            
            
        arr2=[int(x) for x in input().split()]
        ll2=Llist()
        tail=None
        for nodeData in arr2:
            tail=ll2.insert(nodeData,tail)
        
        
        ob = Solution()
        resHead=ob.mergeResult(ll1.head,ll2.head)
        printList(resHead)
        print()
        
    
    
# } Driver Code Ends
